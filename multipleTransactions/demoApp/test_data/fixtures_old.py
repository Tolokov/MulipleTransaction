import json
import random

surnames = [
    "Иванов",
    "Смирнов",
    "Кузнецов",
    "Попов",
    "Соколов",
    "Лебедев",
    "Козлов",
    "Новиков",
    "Морозов",
    "Петров",
    "Алексеев",
    "Семенов",
    "Егоров",
    "Павлов",
    "Николаев",
    "Зайцев",
    "Соловьев",
    "Васильев",
    "Богданов",
    "Федоров",
    "Михайлов",
    "Беляев",
    "Тарасов",
    "Белов",
    "Комаров",
    "Орлов",
    "Киселев",
    "Макаров",
    "Андреев",
    "Ковалев",
    "Ильин",
    "Гусев",
    "Титов",
    "Кузьмин",
    "Кудрявцев",
    "Баранов",
    "Куликов",
    "Александров",
    "Королев",
    "Герасимов",
    "Пономарев",
    "Григорьев",
    "Лазарев",
    "Виноградов",
    "Фролов",
    "Дмитриев",
    "Исаев",
    "Ефимов",
    "Абрамов",
    "Сидоров",
    "Федотов",
]

names = [
    "Александр",
    "Алексей",
    "Анатолий",
    "Андрей",
    "Антон",
    "Аркадий",
    "Артем",
    "Борис",
    "Вадим",
    "Валентин",
    "Валерий",
    "Василий",
    "Виктор",
    "Владимир",
    "Владислав",
    "Вячеслав",
    "Георгий",
    "Глеб",
    "Григорий",
    "Даниил",
    "Денис",
    "Дмитрий",
    "Евгений",
    "Егор",
    "Иван",
    "Игорь",
    "Илья",
    "Константин",
    "Леонид",
    "Максим",
    "Михаил",
    "Никита",
    "Николай",
    "Олег",
    "Павел",
    "Петр",
    "Роман",
    "Руслан",
    "Сергей",
    "Станислав",
    "Тимофей",
    "Федор",
    "Юрий",
    "Ян",
    "Ярослав",
    "Анна",
    "Александра",
    "Алина",
    "Алиса",
    "Алла",
    "Анастасия",
    "Ангелина",
    "Анна",
    "Антонина",
    "Арина",
    "Валентина",
    "Валерия",
    "Вера",
    "Вероника",
    "Виктория",
    "Галина",
    "Дарья",
    "Евгения",
    "Екатерина",
    "Елена",
    "Елизавета",
    "Жанна",
    "Зинаида",
    "Зоя",
    "Инна",
    "Ирина",
]

patronymics = [
    "Александрович",
    "Алексеевич",
    "Анатольевич",
    "Андреевич",
    "Антонович",
    "Аркадьевич",
    "Артемович",
    "Борисович",
    "Вадимович",
    "Валентинович",
    "Валерьевич",
    "Васильевич",
    "Викторович",
    "Владимирович",
    "Владиславович",
    "Вячеславович",
    "Георгиевич",
    "Григорьевич",
    "Даниилович",
    "Денисович",
    "Дмитриевич",
    "Евгеньевич",
    "Егорович",
    "Иванович",
    "Игоревич",
    "Ильич",
    "Константинович",
    "Леонидович",
    "Максимович",
    "Михайлович",
    "Никитич",
    "Николаевич",
    "Олегович",
    "Павлович",
    "Петрович",
    "Романович",
    "Русланович",
    "Сергеевич",
    "Станиславович",
    "Тимофеевич",
    "Федорович",
    "Юрьевич",
    "Янович",
    "Ярославович",
    "Александровна",
    "Алексеевна",
    "Анатольевна",
    "Андреевна",
    "Антоновна",
    "Аркадьевна",
    "Артемовна",
    "Борисовна",
    "Вадимовна",
    "Валентиновна",
    "Валерьевна",
    "Васильевна",
    "Викторовна",
    "Владимировна",
    "Владиславовна",
    "Вячеславовна",
    "Георгиевна",
    "Григорьевна",
    "Данииловна",
    "Денисовна",
    "Дмитриевна",
    "Евгеньевна",
    "Егоровна",
    "Ивановна",
    "Игоревна",
]


def get_pk(count=99999):
    """Get personal key"""
    for pk in range(2, count):
        yield pk


def create_test_prifiles(num, surnames, names, patronymics):
    """Generate one profile"""
    name = random.choice(names)
    last_name = random.choice(surnames)
    patronymic = random.choice(patronymics)

    content = {
        "model": "demoApp.Profile",
        "pk": num.__next__(),
        "fields": {
            "full_name": f"{name} {last_name} {patronymic}",
            "inn": f"{random.randint((10 ** 11) + 1, (10 ** 12) - 1)}",
            "wallet": f"{random.randint((10 ** 3), (10 ** 7)) / 100 * random.randint(0, 1)}",
        }
    }

    return content


def main(how_many_profiles):
    profiles = list()
    pk = get_pk()

    while how_many_profiles:
        how_many_profiles -= 1
        profiles.append(create_test_prifiles(pk, surnames, names, patronymics))
    return profiles


if __name__ == '__main__':
    data = main(20)
    print("Func generate:\n", data)

    with open('test_profiles.json', 'w', encoding="utf=8") as j_file:
        j_file.write(json.dumps(data))
